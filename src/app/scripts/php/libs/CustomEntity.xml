<?xml version="1.0" encoding="utf-8" ?>
<taglib xmlns="http://schemas.neptuo.com/xsd/is4wfw/taglib.xsd">
  <comment>
    Knihovna pro práci s uživatelskými entitami.
  </comment>
  <fulltag>
    <name>form</name>
    <function>form</function>
    <attribute>
      <name>name</name>
      <required />
      <comment>Název entity, pro kterou se má vygenerovat formulář.</comment>
    </attribute>
    <attribute>
      <name>deleteIfEmpty</name>
      <type>bool</type>
      <default>false</default>
      <comment>
        Pokud "true" a ve vstupu od uživatele přijdou všechny hodnoty prázdné, automaticky editovaný záznam smaže.
        Prázdné hodnoty se hledají pouze v aktuálně načtených fieldech.
      </comment>
    </attribute>
    <attribute>
      <name>langIds</name>
      <comment>Id jazyků, pro které mají zpracovávat lokalizované pole.</comment>
    </attribute>
    <attribute>
      <name>key</name>
      <prefix default="merge" />
      <comment>Primární klíče pro editaci záznamu. Klíčem je název sloupce.</comment>
    </attribute>
    <comment>
      Vygeneruje formulář pro přidání/úpravu záznamu v uživatelské entitě.
      Při editaci je nutné uvést všechny primární klíče záznamu, který se má editovat.
    </comment>
  </fulltag>
  <fulltag>
    <name>save</name>
    <function>saveFullTag</function>
    <attribute>
      <name>name</name>
      <required />
      <comment>Název entity, pro kterou se má vygenerovat formulář.</comment>
    </attribute>
    <attribute>
      <name>langIds</name>
      <comment>Id jazyků, pro které mají zpracovávat lokalizované pole.</comment>
    </attribute>
    <attribute>
      <name>key</name>
      <prefix default="merge" />
      <comment>Primární klíče pro editaci záznamu. Klíčem je název sloupce.</comment>
    </attribute>
    <comment>
      Odlehčený "ce:form", který zpracovává pouze akce modelu "save" a "saved".
      Slopuží pro uložení (insert/update) hodnot, které nejsou vstupem od uživatele, 
      ale mají typicky být součástí jiné ukládácí akce. 
      Příklad použití: nastavení sloupce order po založení záznamů, avšak součástí transakce.
    </comment>
  </fulltag>
  <tag>
    <name>register</name>
    <function>register</function>
    <attribute>
      <name>name</name>
      <required />
      <comment>Název sloupce, který se má zaregistrovat do dotazu.</comment>
    </attribute>
    <attribute>
      <name>alias</name>
      <comment>Alias pro sloupec v dotazu.</comment>
    </attribute>
    <attribute>
      <name>aggregation</name>
      <comment>Agregační funkce (count, min, max, sum, avg).</comment>
    </attribute>
    <attribute>
      <name>function</name>
      <comment>Funkce (length, lower, upper).</comment>
    </attribute>
    <comment>
      Zaregistruje do dotazu sloupec podle "name" i přesto, že se pomocí custom property nikde nevypisuje.
      Je možné použít "*" pro výběr vše sloupců z tabulky.
    </comment>
  </tag>
  <tag>
    <name>emptyDirectory</name>
    <function>emptyDirectory</function>
    <attribute>
      <name>name</name>
      <required />
      <comment>Název sloupce, pro který se má vytvořit.</comment>
    </attribute>
    <attribute>
      <name>parentDirId</name>
      <required />
      <comment>Id rodičovské složky, ve které má být vytvořena nová.</comment>
    </attribute>
    <attribute>
      <name>nameFormat</name>
      <required />
      <comment>Formátovací řetězec pro název nové složky. Např.: "{id} - {name}".</comment>
    </attribute>
    <attribute>
      <name>renameOnUpdate</name>
      <type>bool</type>
      <default>false</default>
      <comment>Zda se má složka přejmenovat při aktualizaci (update).</comment>
    </attribute>
  </tag>
  <fulltag>
    <name>createIfEmpty</name>
    <function>createIfEmpty</function>
    <attribute>
      <name>name</name>
      <required />
      <type>string</type>
      <comment>Název fieldu, který se má nastavovat.</comment>
    </attribute>
    <attribute>
      <name>nameIndex</name>
      <type>number</type>
      <default>-1</default>
      <comment>Index, pokud je "name" typu pole.</comment>
    </attribute>
    <attribute>
      <name>source</name>
      <required />
      <type>string</type>
      <comment>Název entity, ze které se mají čerpat data, nebo pole záznamů.</comment>
    </attribute>
    <attribute>
      <name>keyColumn</name>
      <required />
      <type>string</type>
      <comment>Název sloupce, který identifikuje klíč připojovaného záznamu záznamu.</comment>
    </attribute>
    <attribute>
      <name>valueColumn</name>
      <required />
      <type>string</type>
      <comment>Název sloupce, kam se uloží hodnota zadaná uživatelem.</comment>
    </attribute>
    <attribute>
      <name>tableName</name>
      <type>string</type>
      <comment>Pokud je source polem, pak je tento atribut povinný a udává název tabulky, kam se záznam založit.</comment>
    </attribute>
    <attribute>
      <name>value</name>
      <type>string</type>
      <prefix default="merge" />
      <comment>Seznam sloupců s dodatečnými hodnota pro založení záznamu.</comment>
    </attribute>
    <comment>
      Typické použití: Automatické založené položky pro SingleReference, kdy pomocí select2 (nebo jiné) uživatel zadal položku, která v číselníkové tabulce ještě není.
    </comment>
  </fulltag>
  <fulltag>
    <name>list</name>
    <function>getList</function>
    <attribute>
      <name>name</name>
      <required />
      <comment>Název entity, která se má vypsat.</comment>
    </attribute>
    <attribute>
      <name>fields</name>
      <comment>
        Seznam fieldů poskytnutých z "CustomEntityField".
        V případě použití ušetří jedno vyhodnocení vnitřní šablony.
      </comment>
    </attribute>
    <attribute>
      <name>filter</name>
      <prefix />
      <comment>Filtry, kterým data musí vyhovovat.</comment>
    </attribute>
    <attribute>
      <name>groupBy</name>
      <comment>Seznam čárkou oddělených fieldů, podle kterých se má grupovat.</comment>
    </attribute>
    <attribute>
      <name>having</name>
      <prefix />
      <comment>Having filtry, kterým data musí vyhovovat.</comment>
    </attribute>
    <attribute>
      <name>orderBy</name>
      <prefix />
      <comment>Nastavení řazení. Klíčem je název sloupce, hodnota může být "asc" nebo "desc".</comment>
    </attribute>
    <attribute>
      <name>paging</name>
      <comment>Nastavení stránkování pomocí knihovny "Paging".</comment>
    </attribute>
    <attribute>
      <name>langIds</name>
      <comment>Id jazyků, pro které se má načíst lokalizované hodnoty.</comment>
    </attribute>
    <comment>
      Vypíše seznam dat z entity "name".
      List model se nastaví do "ce:list", vypisovat pak lze pomocí "ce:*" (atribut/sloupec) nebo "ce:_" (celá položka).
      Pokud je vyplněn "langIds", pak je pro tyto jazyky přijoinuje lokalizovaná varianta a při výpisu se bere první neprázdná hodnota.
    </comment>
  </fulltag>
  <fulltag>
    <name>deleter</name>
    <function>deleter</function>
    <lookless />
    <attribute>
      <name>name</name>
      <required />
      <comment>Název entity, pro kterou se má vygenerovat formulář.</comment>
    </attribute>
    <anyAttribute>
      <comment>
        Slouží pro where klauzuli při mazání objektů (umožňuje mazat více objektů).
      </comment>
    </anyAttribute>
    <comment>
      Smaže všechny záznamy z entity podle "params".
    </comment>
  </fulltag>
  <tag>
    <name>urlResolver</name>
    <function>urlResolver</function>
    <lookless />
    <attribute>
      <name>propertyName</name>
      <required />
      <type>string</type>
      <comment>Název property, která je v URL definici.</comment>
    </attribute>
    <attribute>
      <name>name</name>
      <required />
      <type>string</type>
      <comment>Název entity, pro kterou se má ověřit hodnota v URL.</comment>
    </attribute>
    <attribute>
      <name>columnName</name>
      <required />
      <type>string</type>
      <comment>Název sloupce, se kterým se bude porovnávat hodnota v URL.</comment>
    </attribute>
    <attribute>
      <name>filter</name>
      <prefix />
      <comment>Filtry, kterým data musí vyhovovat.</comment>
    </attribute>
    <comment>
      Zaregistruje pravidlo, podle kterého je následně možné vyhodnotit property v definici URL.
    </comment>
  </tag>
  <fulltag>
    <name>swap</name>
    <function>swap</function>
    <comment>
      Prohodí pořadí položek identifikovanými pomocí "key1" a "key2" z entity "name". 
      Šablona se spustí, pokud se prohození podaří.
    </comment>
    <lookless />
    <attribute>
      <name>name</name>
	    <type>string</type>
      <required />
      <comment>Název entity, jejíž položky se mají prohodit.</comment>
    </attribute>
    <attribute>
      <name>key1</name>
	    <type>string</type>
      <required />
      <prefix default="merge" />
      <comment>Klíč k první položce.</comment>
    </attribute>
    <attribute>
      <name>key2</name>
	    <type>string</type>
      <required />
      <prefix default="merge" />
      <comment>Klíč ke druhé položce.</comment>
    </attribute>
    <attribute>
      <name>fields</name>
	    <type>string</type>
      <required />
      <comment>Čárkou oddělený seznam názvů fieldů, které se mají mezi položkami prohodit.</comment>
    </attribute>
  </fulltag>
  <property>
    <name>list</name>
    <getFunction>getListData</getFunction>
    <comment>
      Vrací list model uvnitř "ce:list".
    </comment>
  </property>
  <anyProperty>
    <comment>
      Uvnitř "ce:list" vrací fieldy aktuální položky.
      Uvnitř "ce:form" vrací fieldy editovaného modelu.
    </comment>
  </anyProperty>
</taglib>
